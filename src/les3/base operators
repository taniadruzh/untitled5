Оператор if
Этот оператор проверяет, равно ли выражение в скобках true. Если да, то действие выполняется. Если нет, то идёт следующая после блока команда. Пример:

class Test {
    public static void main(String[] args){
        if(true) {
            System.out.println("Тест прошёл успешно.");
        }
    }
}

Оператор else
Действия, написанные в операторе else , будут выполнены, только если значение if равно false. Пример:

class AnotherTest {
    public static void main(String[] args){
        if(false) {
            System.out.println("Тест прошёл не очень успешно.");
        } else {
            System.out.println("Тест прошёл успешно.");
        }
    }
}

Оператор switch
Данный способ сравнивает, то что дано в switch ( в примере снизу это число типа int с переменной i ) и то что написано после ключевого слова case. Таким образом switch сравнивает i с возможными значениями. Пример:

 1 class SwitchTest {
 2     public static void main(String[] args) {
 3         int i = 2;
 4         switch(i) {
 5             case 1:
 6                 System.out.println("Тест работает.");
 7                 break;
 8             case 2:
 9                 System.out.println("Тест добрый.");
10                 break;
11             case 3:
12                 System.out.println("Тест поможет вам.");
13                 break;
14         }
15     }
16 }
Вот код без использования switch , который делает то же самое:

 1 class NoSwitchTest {
 2     public static void main(String[] args) {
 3         int i = 2;
 4         if(i == 1) { // аналог "case 1"
 5             System.out.println("Тест работает");
 6         } else if(i == 2) { // аналог "case 2"
 7             System.out.println("Тест добрый");
 8         } else if(i == 3) { // аналог "case 3"
 9             System.out.println("Тест поможет вам");
10         }
11     }
12 }


Ключевое слово break
Теперь подробнее про ключевое слово break . По умолчанию после того как нужный код из case выполнен, оператор ( если нет этого слова ) перескакивает на следующий case без проверки, таким образом, если бы мы не ставили слово break

Ключевое слово default
Предположим case'ов может быть много, а число не подходит ни к одному. Для таких ситуаций и нужен "default". Он выполняется в случае, если ни один из case'ов не сработал. Пример :

 1 class DefaultTest {
 2     public static void main(String[] args) {
 3         int i = 152;
 4         switch(i) {
 5             case 1:
 6                 System.out.println("Тест работает");
 7                 break;
 8             case 2:
 9                 System.out.println("Тест добрый");
10                 break;
11             case 3:
12                 System.out.println("Тест поможет вам");
13                 break;
14             default:
15                 System.out.println("Тест интересный");
16                 break;
17         }
18     }
19 }

Он как и все case тоже выполняется, если нету ключевого слова break . Пример:

 1 class DefaultAndBreakTest {
 2     public static void main(String[] args) {
 3         int i = 1;
 4         switch(i) {
 5             case 1:
 6                 System.out.println("Тест работает");
 7             case 2:
 8                 System.out.println("Тест добрый");
 9             case 3:
10                 System.out.println("Тест поможет вам");
11             default:
12                 System.out.println("Тест интересный");
13                 break;
14         }
15     }
16 }
Оператор while
Конструкция оператора while:

while (Условие выполнения) {
    Тело цикла;
}
Где выражение в скобках определяет условие: пока (while) оно выполняется, будет выполняться выражение в фигурных скобках.

class WhileLoop {
  public static void main (String[] args ) {
    int a = 0;
    while(a < 10) {
      System.out.print(a);
      a++;
    }
  }
}
Данный цикл выведет:

0123456789
Стоит обратить внимание, что число 10 выведено не будет, так как while это оператор предусловия.

Также обратите внимание на метод print использованный в этом коде, в отличие от println метод print не переводит курсор на новую строку.

Оператор do...while
Конструкция оператора do while:

do {
    Тело цикла;
} while (условие выполения);
Отличие данного оператора от while только в том, что он является оператором постусловия (сначала выполнит, потом проверит).
То есть, даже если условие не выполняется никогда, всё равно действие будет выполнено один раз.

public class DoWhileLoop {
  public static void main (String[] args) {
    int i = 0;
    do {
      System.out.print(i);
      i++;
    } while (i < 10);
    System.out.println(); //Это можно использовать для простого перевода строки
    do {
        System.out.print("Do...while is cool;");
    } while (2 == 3); //Можно было написать и просто false
  }
}

Как видно из кода, несмотря на то что 2 == 3 строчка всё равно была выведена на экран.

Оператор for
Конструкция оператора for:

for (Начальное значение переменной; Логическое выражение с переменной (условие выполнения цикла); Действие над переменной, после выполнения тела цикла) { 
    Операторы, которые будут выполнять цикл при условии, что логическое выражение - true;
}
Цикл for использует переменную i и проверяя её значение выполняет операторы, после чего совершает над ней действие. Например:

class ForLoop {
  public static void main (String[] args ) {
    for (int i = 0; i < 10; i++) {
      System.out.print ("Ku-Ku ");
    }
  }
}
Цикл работает с переменной i. После инициализации этой переменной проверяется условие логического выражения (i < 10), если оно равно true, действие в теле цикла выполняется, после чего переменная увеличивается операцией инкремента i++. И так повторяется до тех пор пока условие логического выражения равняется true.

Тернарный оператор использует три операнда. Выражение записывается в следующей форме:


логическоеУсловие ? выражение1 : выражение2
Если логическоеУсловие равно true, то вычисляется выражение1 и его результат становится результатом выполнения всего оператора. 
Если же логическоеУсловие равно false, то вычисляется выражение2, и его значение становится результатом работы оператора. 
Оба операнда выражение1 и выражение2 должны возвращать значение одинакового (или совместимого) типа.
